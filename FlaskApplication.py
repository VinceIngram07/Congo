# -*- coding: utf-8 -*-

"""Database_Midterm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NRLFrfE7sTpuLZMHP4q5pzDKILMS2_Wp
"""


from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'  # Example for SQLite
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

from sqlalchemy.dialects.mysql import TINYINT, DECIMAL, SMALLINT, ENUM, YEAR, SET, TIMESTAMP
from sqlalchemy.sql import func

class Film(db.Model):
    __tablename__ = 'film'
    film_id = db.Column(SMALLINT(unsigned=True), primary_key=True, autoincrement=True)
    title = db.Column(db.String(128), nullable=False)
    description = db.Column(db.Text, default=None)
    release_year = db.Column(YEAR, default=None)
    language_id = db.Column(TINYINT(unsigned=True), db.ForeignKey('language.language_id'), nullable=False)
    original_language_id = db.Column(TINYINT(unsigned=True), db.ForeignKey('language.language_id'), default=None)
    rental_duration = db.Column(TINYINT(unsigned=True), default=3, nullable=False)
    rental_rate = db.Column(DECIMAL(4,2), default=4.99, nullable=False)
    length = db.Column(SMALLINT(unsigned=True), default=None)
    replacement_cost = db.Column(DECIMAL(5,2), default=19.99, nullable=False)
    rating = db.Column(ENUM('G', 'PG', 'PG-13', 'R', 'NC-17'), default='G')
    special_features = db.Column(SET('Trailers', 'Commentaries', 'Deleted Scenes', 'Behind the Scenes'), default=None)
    last_update = db.Column(TIMESTAMP, nullable=False, server_default=func.current_timestamp(), onupdate=func.current_timestamp())

    def to_dict(self):
        return {
            'film_id': self.film_id,
            'title': self.title,
            'description': self.description,
            'release_year': self.release_year,
            'language_id': self.language_id,
            'original_language_id': self.original_language_id,
            'rental_duration': self.rental_duration,
            'rental_rate': self.rental_rate,
            'length': self.length,
            'replacement_cost': self.replacement_cost,
            'rating': self.rating,
            'special_features': self.special_features,
            'last_update': self.last_update
        }

# CRUD Operation: Create
@app.route('/films', methods=['POST'])
def create__film():
    data = request.get_json()
    new_film = Film(title=data['title'], description=data['description'])
    db.session.add(new_film)
    db.session.commit()
    return jsonify(new_film.to_dict()), 201

#CRUD OPERATION: Read
@app.route('/films/<int:film_id>', methods=['GET'])
def get_film(film_id):
    film = Film.query.get_or_404(film_id)
    return jsonify(film.to_dict())

#CRUDE Operation: Update
@app.route('/films/<int:film_id>', methods=['PUT'])
def update_film(film_id):
    film = Film.query.get_or_404(film_id)
    data = request.get_json()
    film.title = data.get('title', film.title)
    film.description = data.get('description', film.description)
    db.session.commit()
    return jsonify(film.to_dict())

#CRUD Operation: Delete
@app.route('/films/<int:film_id>', methods=['DELETE'])
def delete_film(film_id):
    film = Film.query.get_or_404(film_id)
    db.session.delete(film)
    db.session.commit()
    return jsonify({'message': 'Film deleted successfully'})

import threading

def run_app():
    app.run(debug=True, use_reloader=False, port=5000)  # Port number can be any

app_thread = threading.Thread(target=run_app)
app_thread.start()
